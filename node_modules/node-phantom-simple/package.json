{
  "_args": [
    [
      {
        "raw": "node-phantom-simple",
        "scope": null,
        "escapedName": "node-phantom-simple",
        "name": "node-phantom-simple",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/levonter-minasyan/work/VS/datasetCreator"
    ]
  ],
  "_from": "node-phantom-simple@latest",
  "_id": "node-phantom-simple@2.2.4",
  "_inCache": true,
  "_location": "/node-phantom-simple",
  "_nodeVersion": "4.2.6",
  "_npmUser": {
    "name": "vitaly",
    "email": "vitaly@rcdesign.ru"
  },
  "_npmVersion": "2.14.12",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-phantom-simple",
    "scope": null,
    "escapedName": "node-phantom-simple",
    "name": "node-phantom-simple",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-phantom-simple/-/node-phantom-simple-2.2.4.tgz",
  "_shasum": "4fc4effbb02f241fb5082bd4fbab398e4aecb64d",
  "_shrinkwrap": null,
  "_spec": "node-phantom-simple",
  "_where": "/Users/levonter-minasyan/work/VS/datasetCreator",
  "author": {
    "name": "Matt Sergeant",
    "url": "matt@hubdoc.com"
  },
  "bugs": {
    "url": "https://github.com/baudehlo/node-phantom-simple/issues"
  },
  "dependencies": {
    "debug": "^2.2.0"
  },
  "description": "Simple and reliable bridge between Node.js and PhantomJS / SlimerJS",
  "devDependencies": {
    "eslint": "0.24.1",
    "eslint-plugin-nodeca": "^1.0.0",
    "mocha": "^2.2.5",
    "phantomjs": "^1.9.19",
    "slimerjs": "~0.9.6"
  },
  "directories": {},
  "dist": {
    "shasum": "4fc4effbb02f241fb5082bd4fbab398e4aecb64d",
    "tarball": "https://registry.npmjs.org/node-phantom-simple/-/node-phantom-simple-2.2.4.tgz"
  },
  "files": [
    "bridge.js",
    "headless_error.js",
    "node-phantom-simple.js"
  ],
  "gitHead": "fd47bbdbbcd9180ae4e67458e625e3a1568cd378",
  "homepage": "https://github.com/baudehlo/node-phantom-simple#readme",
  "license": "MIT",
  "main": "node-phantom-simple.js",
  "maintainers": [
    {
      "name": "msergeant",
      "email": "helpme@gmail.com"
    },
    {
      "name": "vitaly",
      "email": "vitaly@rcdesign.ru"
    }
  ],
  "name": "node-phantom-simple",
  "optionalDependencies": {},
  "readme": "node-phantom-simple\n===================\n\n[![Build Status](https://img.shields.io/travis/baudehlo/node-phantom-simple/master.svg?style=flat)](https://travis-ci.org/baudehlo/node-phantom-simple)\n[![NPM version](https://img.shields.io/npm/v/node-phantom-simple.svg?style=flat)](https://www.npmjs.org/package/node-phantom-simple)\n\n> A bridge between [PhantomJS](http://phantomjs.org/) / [SlimerJS](https://slimerjs.org/)\nand [Node.js](http://nodejs.org/).\n\nThis module is API-compatible with\n[node-phantom](https://www.npmjs.com/package/node-phantom) but doesn't rely on\n`WebSockets` / `socket.io`. In essence the communication between Node and\nPhantom / Slimer has been simplified significantly. It has the following advantages\nover `node-phantom`:\n\n  - Fewer dependencies/layers.\n  - Doesn't use the unreliable and huge socket.io.\n  - Works under [`cluster`](http://nodejs.org/api/cluster.html) (node-phantom\n    does not, due to [how it works](https://nodejs.org/api/cluster.html#cluster_how_it_works))\n    `server.listen(0)` works in cluster.\n  - Supports SlimerJS.\n\n\nMigrating 1.x -> 2.x\n--------------------\n\nYour software should work without changes, but can show deprecation warning\nabout outdated signatures. You need to update:\n\n- `options.phantomPath` -> `options.path`\n- in `.create()` `.evaluate()` & `.waitForSelector()` -> move `callback` to last\n  position of arguments list.\n\nThat's all!\n\n\nInstalling\n----------\n\n```bash\nnpm install node-phantom-simple\n\n# Also need phantomjs OR slimerjs:\n\nnpm install phantomjs\n# OR\nnpm install slimerjs\n```\n\n__Note__. SlimerJS is not headless and requires a windowing environment.\nUnder Linux/FreeBSD/OSX [xvfb can be used to run headlessly.](https://docs.slimerjs.org/current/installation.html#having-a-headless-slimerjs). For example, if you wish\nto run SlimerJS on Travis-CI, add those lines to your `.travis.yml` config:\n\n```yaml\nbefore_script:\n  - export DISPLAY=:99.0\n  - \"sh -e /etc/init.d/xvfb start\"\n```\n\n\nUsage\n-----\n\nYou can use it exactly like node-phantom, and the entire API of PhantomJS\nshould work, with the exception that every method call takes a callback (always\nas the last parameter), instead of returning values.\n\nFor example, this is an adaptation of a\n[web scraping example](http://net.tutsplus.com/tutorials/javascript-ajax/web-scraping-with-node-js/):\n\n```js\nvar driver = require('node-phantom-simple');\n\ndriver.create({ path: require('phantomjs').path }, function (err, browser) {\n  return browser.createPage(function (err, page) {\n    return page.open(\"http://tilomitra.com/repository/screenscrape/ajax.html\", function (err,status) {\n      console.log(\"opened site? \", status);\n      page.includeJs('http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js', function (err) {\n        // jQuery Loaded.\n        // Wait for a bit for AJAX content to load on the page. Here, we are waiting 5 seconds.\n        setTimeout(function () {\n          return page.evaluate(function () {\n            //Get what you want from the page using jQuery. A good way is to populate an object with all the jQuery commands that you need and then return the object.\n            var h2Arr = [],\n                pArr = [];\n\n            $('h2').each(function () { h2Arr.push($(this).html()); });\n            $('p').each(function () { pArr.push($(this).html()); });\n\n            return {\n              h2: h2Arr,\n              p: pArr\n            };\n          }, function (err,result) {\n            console.log(result);\n            browser.exit();\n          });\n        }, 5000);\n      });\n\t  });\n  });\n});\n```\n\n### .create(options, callback)\n\n__options__ (not mandatory):\n\n- __path__ (String) - path to phantomjs/slimerjs, if not set - will search in $PATH\n- __parameters__ (Array) - CLI params for executed engine, [ { nave: value } ].\n  You can also pass in an array to use verbatim names and values.\n- __ignoreErrorPattern__ (RegExp) - a regular expression that can be used to\n  silence spurious warnings in console, generated by Qt and PhantomJS.\n  On Mavericks, you can use `/CoreText/` to suppress some common annoying\n  font-related warnings.\n\n\nFor example\n\n```js\ndriver.create({ parameters: { 'ignore-ssl-errors': 'yes' } }, callback)\ndriver.create({ parameters: ['-jsconsole', '-P', 'myVal']} }, callback)\n```\n\nwill start phantom as:\n\n```bash\nphantomjs --ignore-ssl-errors=yes\n```\n\nYou can rely on globally installed engines, but we recommend to pass path explicit:\n\n```js\ndriver.create({ path: require('phantomjs').path }, callback)\n// or for slimer\ndriver.create({ path: require('slimerjs').path }, callback)\n```\n\nYou can also have a look at [the test directory](tests/) to see some examples\nof using the API, however the de-facto reference is the\n[PhantomJS documentation](https://github.com/ariya/phantomjs/wiki/API-Reference).\nJust mentally substitute all return values for callbacks.\n\n\nWebPage Callbacks\n-----------------\n\nAll of the `WebPage` callbacks have been implemented including `onCallback`,\nand are set the same way as with the core phantomjs library:\n\n```js\npage.onResourceReceived = function(response) {\n  console.log('Response (#' + response.id + ', stage \"' + response.stage + '\"): ' + JSON.stringify(response));\n};\n```\n\nThis includes the `onPageCreated` callback which receives a new `page` object.\n\n\nProperties\n----------\n\nProperties on the [WebPage](https://github.com/ariya/phantomjs/wiki/API-Reference-WebPage)\nand [Phantom](https://github.com/ariya/phantomjs/wiki/API-Reference-phantom)\nobjects are accessed via the `get()`/`set()` method calls:\n\n```js\npage.get('content', function (err, html) {\n  console.log(\"Page HTML is: \" + html);\n});\n\npage.set('zoomfactor', 0.25, function () {\n  page.render('capture.png');\n});\n\n// You can get/set nested values easy!\npage.set('settings.userAgent', 'PhAnToSlImEr', callback);\n```\n\n\nKnown issues\n------------\n\nEngines are buggy. Here are some cases you should know.\n\n- `.evaluate` can return corrupted result:\n  - SlimerJS: undefined -> null.\n  - PhantomJS:\n    - undefined -> null\n    - null -> '' (empty string)\n    - [ 1, undefined, 2 ] -> null\n- `page.onConfirm()` handler can not return value due async driver nature.\n  Use `.setFn()` instead: `page.setFn('onConfirm', function () { return true; })`.\n\nLicense\n-------\n\n[MIT](https://github.com/baudehlo/node-phantom-simple/blob/master/LICENSE)\n\n\nOther\n-----\n\nMade by Matt Sergeant for Hubdoc Inc.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/baudehlo/node-phantom-simple.git"
  },
  "scripts": {
    "lint": "eslint --reset .",
    "test": "npm run test-phantom && npm run test-slimer",
    "test-phantom": "npm run lint && ./node_modules/.bin/mocha",
    "test-slimer": "ENGINE=slimerjs ./node_modules/.bin/mocha"
  },
  "version": "2.2.4"
}
