{
  "_args": [
    [
      {
        "raw": "scss-to-json@^1.1.0",
        "scope": null,
        "escapedName": "scss-to-json",
        "name": "scss-to-json",
        "rawSpec": "^1.1.0",
        "spec": ">=1.1.0 <2.0.0",
        "type": "range"
      },
      "/Users/levonter-minasyan/work/VS/datasetCreator"
    ]
  ],
  "_from": "scss-to-json@>=1.1.0 <2.0.0",
  "_id": "scss-to-json@1.1.0",
  "_inCache": true,
  "_location": "/scss-to-json",
  "_nodeVersion": "0.12.2",
  "_npmUser": {
    "name": "ryanbahniuk",
    "email": "ryan.bahniuk@gmail.com"
  },
  "_npmVersion": "2.9.0",
  "_phantomChildren": {
    "async-foreach": "0.1.3",
    "chalk": "1.1.3",
    "gaze": "1.1.2",
    "get-stdin": "4.0.1",
    "glob": "7.1.1",
    "in-publish": "2.0.0",
    "lodash.assign": "4.2.0",
    "lodash.clonedeep": "4.5.0",
    "meow": "3.7.0",
    "nan": "2.6.2",
    "node-gyp": "3.6.0",
    "npmlog": "4.0.2",
    "pseudomap": "1.0.2",
    "request": "2.67.0",
    "sass-graph": "2.1.2",
    "which": "1.2.14",
    "yallist": "2.1.2"
  },
  "_requested": {
    "raw": "scss-to-json@^1.1.0",
    "scope": null,
    "escapedName": "scss-to-json",
    "name": "scss-to-json",
    "rawSpec": "^1.1.0",
    "spec": ">=1.1.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/scss-to-json/-/scss-to-json-1.1.0.tgz",
  "_shasum": "a76555605b27db15114156797928e3d3ddf62128",
  "_shrinkwrap": null,
  "_spec": "scss-to-json@^1.1.0",
  "_where": "/Users/levonter-minasyan/work/VS/datasetCreator",
  "author": {
    "name": "Ryan Bahniuk",
    "email": "ryan.bahniuk@gmail.com",
    "url": "http://bahni.uk"
  },
  "bin": {
    "scss-to-json": "./bin/scss-to-json"
  },
  "bugs": {
    "url": "https://github.com/ryanbahniuk/scss-to-json/issues"
  },
  "dependencies": {
    "cssmin": "^0.4.3",
    "minimist": "^1.2.0",
    "node-sass": "^3.1.2"
  },
  "description": "A utility for converting SCSS variables files to JSON",
  "devDependencies": {
    "cross-spawn": "2.0.0",
    "eslint": "1.9.0",
    "mocha": "2.2.5",
    "proxyquire": "1.6.0",
    "sinon": "1.15.4",
    "wealthfront-javascript": "2.4.0"
  },
  "directories": {},
  "dist": {
    "shasum": "a76555605b27db15114156797928e3d3ddf62128",
    "tarball": "https://registry.npmjs.org/scss-to-json/-/scss-to-json-1.1.0.tgz"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "gitHead": "6f0417ce7a6390951fbe097656d8eba3a6032e59",
  "homepage": "https://github.com/ryanbahniuk/scss-to-json",
  "keywords": [
    "scss",
    "json"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/ryanbahniuk/scss-to-json/blob/master/LICENSE-MIT"
    }
  ],
  "main": "main.js",
  "maintainers": [
    {
      "name": "ryanbahniuk",
      "email": "ryan.bahniuk@gmail.com"
    }
  ],
  "name": "scss-to-json",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/ryanbahniuk/scss-to-json.svg?branch=master)](https://travis-ci.org/ryanbahniuk/scss-to-json)\n\n# scss-to-json\n\n> A package to require SCSS variables in JSON format.\n\nThis package allows you to use your SCSS variables in your JS code. Specifically, it takes a SCSS variable file (example below) and will parse, run Sass functions, and convert to JSON format. This package is a function that will make this conversion for you in memory. If you want to output JSON to your file system, you should use the associated [grunt-scss-to-json](https://www.npmjs.com/package/grunt-scss-to-json \"grunt-scss-to-json\") package.\n\n## Installation\n\nInstall via npm:\n\n ```sh\nnpm install scss-to-json\n ```\n\n## Input and Output\n\nThis package requires a SCSS variables file that is isolated by itself with no other SCSS code. If you are working in a front-end framework or library it is likely that your SCSS code is already set up in this manner. For example, this package will work well with a variables.scss file that looks something like this:\n\n```scss\n// Font Sizes\n$font-size: 14px;\n$font-size-large: $font-size * 1.1;\n\n// Colors\n$text-color: #666;\n$text-color-light: lighten($text-color, 15%);\n$border-color: #123 !global; // use for all borders\n```\n\nWhen run on that code above, scss-to-json will output the below JSON:\n\n```js\n{\n  '$font-size': '14px',\n  '$font-size-large': '15.4px',\n  '$text-color': '#666',\n  '$text-color-light': '#8c8c8c',\n  '$border-color': '#123'\n}\n```\n\nNote that scss-to-json will filter out flags (marked with an !) and comments and evaluate Sass functions before it produces the JSON object.\n\n## Using this Package\n\nIn your CommonJS JavaScript file, requiring this package will return a function that takes a file path of your SCSS variables file. It also takes an optional options object, which is detailed in the next section.\n\n```js\nvar scssToJson = require('scss-to-json');\nvar path = require('path');\n\nvar filePath = path.resolve(__dirname, 'colors.scss');\nvar colors = scssToJson(filePath);\n```\n\n## Options\n\nThe second argument of the returned function is an optional options object. Each option is detailed below:\n\n### Dependencies\n\nSCSS variables files sometimes rely on other SCSS variables defined earlier in your import tree. In order to keep these files isolated (and still produce JSON), you can specify an array of files that your given file depends on. For example, below we are trying to convert our color mapping file, but it depends on the actual color definitions which are found in a different file.\n\n```js\nvar scssToJson = require('scss-to-json');\nvar path = require('path');\n\nvar filePath = path.resolve(__dirname, 'color-mapping.scss');\nvar dependencyPath = path.resolve(__dirname, 'colors.scss');\nvar colors = scssToJson(filePath, {\n  dependencies: [{path: dependencyPath}]\n});\n```\n\n### Scoping\n\nSCSS variable files are able to provide local and global scope with the following method:\n\n```scss\n%scoped {\n  $font-size: 14px;\n  $font-size-large: $font-size * 1.1 !global;\n}\n\nhtml {\n  @extend %scoped;\n}\n```\n\nThis will keep `$font-size` scoped locally inside that block, while allowing it to be used to derive global variables marked with the `!global` flag. These variables will be available throughout your SCSS import tree.\n\nIf you use this method in your SCSS variables file, you can provide an option to scss-to-json to output only the global variables to JSON. The option takes the name of the scoping placeholder as a string.\n\n```js\nvar scssToJson = require('scss-to-json');\nvar path = require('path');\n\nvar filePath = path.resolve(__dirname, 'variables.scss');\nvar colors = scssToJson(filePath, {\n  scope: '%scoped'\n});\n```\n\n## CLI\n\nYou can also use the CLI `scss-to-json <file>`.\n\n\n## Contributing\n\nPull requests are welcome. If you add functionality, then please add unit tests\nto cover it. Continuous Integration is handled by [Travis](https://travis-ci.org/ryanbahniuk/scss-to-json \"Travis\").\n\n## License\n\nMIT Â© Ryan Bahniuk\n\n[ci]:      https://travis-ci.org/ryanbahniuk/scss-to-json\n[npm]:     https://www.npmjs.com/package/scss-to-json\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/ryanbahniuk/scss-to-json.git"
  },
  "scripts": {
    "pretest": "eslint .",
    "test": "NODE_ENV=test mocha"
  },
  "version": "1.1.0"
}
